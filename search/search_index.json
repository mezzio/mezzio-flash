{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"mezzio-flash üá∑üá∫ –†—É—Å—Å–∫–∏–º –≥—Ä–∞–∂–¥–∞–Ω–∞–º –ú—ã, —É—á–∞—Å—Ç–Ω–∏–∫–∏ Laminas, —Ä–æ–¥–∏–ª–∏—Å—å –∏ –∂–∏–≤–µ–º –≤ —Ä–∞–∑–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∞—Ö. –£ –º–Ω–æ–≥–∏—Ö –∏–∑ –Ω–∞—Å –µ—Å—Ç—å –¥—Ä—É–∑—å—è, —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫–∏ –∏ –∫–æ–ª–ª–µ–≥–∏ –∫–∞–∫ –≤ –†–æ—Å—Å–∏–∏, —Ç–∞–∫ –∏ –≤ –£–∫—Ä–∞–∏–Ω–µ. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–∑ –Ω–∞—Å —Ä–æ–¥–∏–ª–∏—Å—å –≤ –†–æ—Å—Å–∏–∏. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–∑ –Ω–∞—Å –∂–∏–≤—É—Ç –≤ –†–æ—Å—Å–∏–∏. –£ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –±–∞–±—É—à–∫–∏ –∏ –¥–µ–¥—É—à–∫–∏ —Å—Ä–∞–∂–∞–ª–∏—Å—å —Å —Ñ–∞—à–∏—Å—Ç–∞–º–∏ –≤–æ –í—Ç–æ—Ä–æ–π –º–∏—Ä–æ–≤–æ–π –≤–æ–π–Ω–µ. –ó–¥–µ—Å—å –Ω–∏–∫—Ç–æ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ñ–∞—à–∏–∑–º. –£ –æ–¥–Ω–æ–≥–æ –∏–∑ –Ω–∞—Å –µ—Å—Ç—å —É–∫—Ä–∞–∏–Ω—Å–∫–∞—è —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏—Ü–∞, –∫–æ—Ç–æ—Ä–∞—è —Å–ø–∞—Å–ª–∞—Å—å –∏–∑ –¥–æ–º–∞ –≤–º–µ—Å—Ç–µ —Å —Å—ã–Ω–æ–º. –ü–æ–µ–∑–¥ –∑–∞–¥–µ—Ä–∂–∞–ª—Å—è –∏–∑-–∑–∞ –±–æ–º–±–µ–∂–∫–∏ –Ω–∞ –¥–æ—Ä–æ–≥–µ –≤–ø–µ—Ä–µ–¥–∏. –£ –Ω–∞—Å –µ—Å—Ç—å –¥—Ä—É–∑—å—è, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä—è—á—É—Ç—Å—è –≤ –±–æ–º–±–æ—É–±–µ–∂–∏—â–∞—Ö. –ú—ã —Å —Ç—Ä–µ–≤–æ–≥–æ–π –∂–¥–µ–º –≤–µ—Å—Ç–æ—á–∫–∏ –æ—Ç –Ω–∏—Ö –ø–æ—Å–ª–µ –≤–æ–∑–¥—É—à–Ω—ã—Ö –Ω–∞–ª–µ—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –±–µ—Å–ø–æ—Ä—è–¥–æ—á–Ω–æ –Ω–∞–Ω–æ—Å—è—Ç —É–¥–∞—Ä—ã –∏ –ø–æ–ø–∞–¥–∞—é—Ç –ø–æ –±–æ–ª—å–Ω–∏—Ü–∞–º, —à–∫–æ–ª–∞–º, –¥–µ—Ç—Å–∫–∏–º —Å–∞–¥–∞–º –∏ –¥–æ–º–∞–º. –ú—ã –Ω–µ –±–µ—Ä–µ–º —ç—Ç–æ –∏–∑ –∫–∞–∫–∏—Ö-–ª–∏–±–æ –°–ú–ò. –ú—ã –Ω–∞–±–ª—é–¥–∞–µ–º —ç—Ç–æ –Ω–∞–ø—Ä—è–º—É—é. –í—ã –¥–æ–≤–µ—Ä—è–µ—Ç–µ –Ω–∞–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, —á—Ç–æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞—à–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã, –∏ –º—ã –ø—Ä–æ—Å–∏–º –≤–∞—Å –¥–æ–≤–µ—Ä–∏—Ç—å—Å—è –Ω–∞–º –≤–Ω–æ–≤—å. –ú—ã –Ω—É–∂–¥–∞–µ–º—Å—è –≤ –ø–æ–º–æ—â–∏. –í—ã—Ö–æ–¥–∏—Ç–µ –∏ –ø—Ä–æ—Ç–µ—Å—Ç—É–π—Ç–µ –ø—Ä–æ—Ç–∏–≤ —ç—Ç–æ–π –±–µ—Å–ø–æ–ª–µ–∑–Ω–æ–π –≤–æ–π–Ω—ã. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∫—Ä–æ–≤–æ–ø—Ä–æ–ª–∏—Ç–∏–µ. –°–∫–∞–∂–∏—Ç–µ \"–ù–µ—Ç –≤–æ–π–Ω–µ!\" üá∫üá∏ To Citizens of Russia We at Laminas come from all over the world. Many of us have friends, family and colleagues in both Russia and Ukraine. Some of us were born in Russia. Some of us currently live in Russia. Some have grandparents who fought Nazis in World War II. Nobody here supports fascism. One team member has a Ukrainian relative who fled her home with her son. The train was delayed due to bombing on the road ahead. We have friends who are hiding in bomb shelters. We anxiously follow up on them after the air raids, which indiscriminately fire at hospitals, schools, kindergartens and houses. We're not taking this from any media. These are our actual experiences. You trust us enough to use our software. We ask that you trust us to say the truth on this. We need your help. Go out and protest this unnecessary war. Stop the bloodshed. Say \"stop the war!\" Provides flash messages for PSR-7 middleware using mezzio-session . Installation Run the following to install this library: $ composer require mezzio/mezzio-flash Documentation Documentation is in the doc tree , and can be compiled using mkdocs : $ mkdocs build You may also browse the documentation online .","title":"Home"},{"location":"#mezzio-flash","text":"","title":"mezzio-flash"},{"location":"#_1","text":"–ú—ã, —É—á–∞—Å—Ç–Ω–∏–∫–∏ Laminas, —Ä–æ–¥–∏–ª–∏—Å—å –∏ –∂–∏–≤–µ–º –≤ —Ä–∞–∑–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∞—Ö. –£ –º–Ω–æ–≥–∏—Ö –∏–∑ –Ω–∞—Å –µ—Å—Ç—å –¥—Ä—É–∑—å—è, —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫–∏ –∏ –∫–æ–ª–ª–µ–≥–∏ –∫–∞–∫ –≤ –†–æ—Å—Å–∏–∏, —Ç–∞–∫ –∏ –≤ –£–∫—Ä–∞–∏–Ω–µ. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–∑ –Ω–∞—Å —Ä–æ–¥–∏–ª–∏—Å—å –≤ –†–æ—Å—Å–∏–∏. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–∑ –Ω–∞—Å –∂–∏–≤—É—Ç –≤ –†–æ—Å—Å–∏–∏. –£ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –±–∞–±—É—à–∫–∏ –∏ –¥–µ–¥—É—à–∫–∏ —Å—Ä–∞–∂–∞–ª–∏—Å—å —Å —Ñ–∞—à–∏—Å—Ç–∞–º–∏ –≤–æ –í—Ç–æ—Ä–æ–π –º–∏—Ä–æ–≤–æ–π –≤–æ–π–Ω–µ. –ó–¥–µ—Å—å –Ω–∏–∫—Ç–æ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ñ–∞—à–∏–∑–º. –£ –æ–¥–Ω–æ–≥–æ –∏–∑ –Ω–∞—Å –µ—Å—Ç—å —É–∫—Ä–∞–∏–Ω—Å–∫–∞—è —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏—Ü–∞, –∫–æ—Ç–æ—Ä–∞—è —Å–ø–∞—Å–ª–∞—Å—å –∏–∑ –¥–æ–º–∞ –≤–º–µ—Å—Ç–µ —Å —Å—ã–Ω–æ–º. –ü–æ–µ–∑–¥ –∑–∞–¥–µ—Ä–∂–∞–ª—Å—è –∏–∑-–∑–∞ –±–æ–º–±–µ–∂–∫–∏ –Ω–∞ –¥–æ—Ä–æ–≥–µ –≤–ø–µ—Ä–µ–¥–∏. –£ –Ω–∞—Å –µ—Å—Ç—å –¥—Ä—É–∑—å—è, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä—è—á—É—Ç—Å—è –≤ –±–æ–º–±–æ—É–±–µ–∂–∏—â–∞—Ö. –ú—ã —Å —Ç—Ä–µ–≤–æ–≥–æ–π –∂–¥–µ–º –≤–µ—Å—Ç–æ—á–∫–∏ –æ—Ç –Ω–∏—Ö –ø–æ—Å–ª–µ –≤–æ–∑–¥—É—à–Ω—ã—Ö –Ω–∞–ª–µ—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –±–µ—Å–ø–æ—Ä—è–¥–æ—á–Ω–æ –Ω–∞–Ω–æ—Å—è—Ç —É–¥–∞—Ä—ã –∏ –ø–æ–ø–∞–¥–∞—é—Ç –ø–æ –±–æ–ª—å–Ω–∏—Ü–∞–º, —à–∫–æ–ª–∞–º, –¥–µ—Ç—Å–∫–∏–º —Å–∞–¥–∞–º –∏ –¥–æ–º–∞–º. –ú—ã –Ω–µ –±–µ—Ä–µ–º —ç—Ç–æ –∏–∑ –∫–∞–∫–∏—Ö-–ª–∏–±–æ –°–ú–ò. –ú—ã –Ω–∞–±–ª—é–¥–∞–µ–º —ç—Ç–æ –Ω–∞–ø—Ä—è–º—É—é. –í—ã –¥–æ–≤–µ—Ä—è–µ—Ç–µ –Ω–∞–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, —á—Ç–æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞—à–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã, –∏ –º—ã –ø—Ä–æ—Å–∏–º –≤–∞—Å –¥–æ–≤–µ—Ä–∏—Ç—å—Å—è –Ω–∞–º –≤–Ω–æ–≤—å. –ú—ã –Ω—É–∂–¥–∞–µ–º—Å—è –≤ –ø–æ–º–æ—â–∏. –í—ã—Ö–æ–¥–∏—Ç–µ –∏ –ø—Ä–æ—Ç–µ—Å—Ç—É–π—Ç–µ –ø—Ä–æ—Ç–∏–≤ —ç—Ç–æ–π –±–µ—Å–ø–æ–ª–µ–∑–Ω–æ–π –≤–æ–π–Ω—ã. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∫—Ä–æ–≤–æ–ø—Ä–æ–ª–∏—Ç–∏–µ. –°–∫–∞–∂–∏—Ç–µ \"–ù–µ—Ç –≤–æ–π–Ω–µ!\"","title":"üá∑üá∫ –†—É—Å—Å–∫–∏–º –≥—Ä–∞–∂–¥–∞–Ω–∞–º"},{"location":"#to-citizens-of-russia","text":"We at Laminas come from all over the world. Many of us have friends, family and colleagues in both Russia and Ukraine. Some of us were born in Russia. Some of us currently live in Russia. Some have grandparents who fought Nazis in World War II. Nobody here supports fascism. One team member has a Ukrainian relative who fled her home with her son. The train was delayed due to bombing on the road ahead. We have friends who are hiding in bomb shelters. We anxiously follow up on them after the air raids, which indiscriminately fire at hospitals, schools, kindergartens and houses. We're not taking this from any media. These are our actual experiences. You trust us enough to use our software. We ask that you trust us to say the truth on this. We need your help. Go out and protest this unnecessary war. Stop the bloodshed. Say \"stop the war!\" Provides flash messages for PSR-7 middleware using mezzio-session .","title":"üá∫üá∏ To Citizens of Russia"},{"location":"#installation","text":"Run the following to install this library: $ composer require mezzio/mezzio-flash","title":"Installation"},{"location":"#documentation","text":"Documentation is in the doc tree , and can be compiled using mkdocs : $ mkdocs build You may also browse the documentation online .","title":"Documentation"},{"location":"intro/","text":"mezzio-flash Flash messages are self-expiring, session-based messages. They are typically used when you need to redirect after processing a request (e.g., when using the Post-Redirect-Get pattern ), but want to display a message back to the user indicating a processing result. As an example, I may want to display a \"Thank You\" message to the user after successfully completing a form. I can do that with flash messages. When processing, I would create the message in my middleware: $flashMessages-&gt;flash('form-complete', 'Thank you; your submission was recorded.'); On the subsequent request, my middleware would pull that message: $message = $flashMessages-&gt;getFlash('form-complete'); On any subsequent requests, the message is no longer available! Installation To use the component, install via Composer : $ composer require mezzio/mezzio-flash Persistence required mezzio-flash depends on mezzio-session, which defines abstractions around session containers ‚Äî for use within applications for accessing session data ‚Äî and session persistence (how the session data is persisted between requests, and reported to the client). Persistence requires a persistence adapter . We offer one based on PHP's session extension via the package mezzio-session-ext; others may also be available soon.","title":"Introduction"},{"location":"intro/#mezzio-flash","text":"Flash messages are self-expiring, session-based messages. They are typically used when you need to redirect after processing a request (e.g., when using the Post-Redirect-Get pattern ), but want to display a message back to the user indicating a processing result. As an example, I may want to display a \"Thank You\" message to the user after successfully completing a form. I can do that with flash messages. When processing, I would create the message in my middleware: $flashMessages-&gt;flash('form-complete', 'Thank you; your submission was recorded.'); On the subsequent request, my middleware would pull that message: $message = $flashMessages-&gt;getFlash('form-complete'); On any subsequent requests, the message is no longer available!","title":"mezzio-flash"},{"location":"intro/#installation","text":"To use the component, install via Composer : $ composer require mezzio/mezzio-flash","title":"Installation"},{"location":"messages/","text":"Flash Messages Flash messages are contained within a Mezzio\\Flash\\FlashMessagesInterface implementation. That interface is defined as follows: namespace Mezzio\\Flash; use Mezzio\\Session\\SessionInterface; interface FlashMessagesInterface { /** * Flash values scheduled for next request. */ public const FLASH_NEXT = self::class . '::FLASH_NEXT'; /** * Create an instance from a session container. * * Flash messages will be retrieved from and persisted to the session via * the `$sessionKey`. */ public static function createFromSession( SessionInterface $session, string $sessionKey = self::FLASH_NEXT ) : FlashMessagesInterface; /** * Set a flash value with the given key. * * Flash values are accessible on the next \"hop\", where a hop is the * next time the session is accessed; you may pass an additional $hops * integer to allow access for more than one hop. * * @param mixed $value */ public function flash(string $key, $value, int $hops = 1) : void; /** * Set a flash value with the given key, but allow access during this request. * * Flash values are generally accessible only on subsequent requests; * using this method, you may make the value available during the current * request as well. * * @param mixed $value */ public function flashNow(string $key, $value, int $hops = 1) : void; /** * Retrieve a flash value. * * Will return a value only if a flash value was set in a previous request, * or if `flashNow()` was called in this request with the same `$key`. * * WILL NOT return a value if set in the current request via `flash()`. * * @param mixed $default Default value to return if no flash value exists. * @return mixed */ public function getFlash(string $key, $default = null); /** * Retrieve all flash values. * * Will return all values was set in a previous request, or if `flashNow()` * was called in this request. * * WILL NOT return values set in the current request via `flash()`. * * @return array */ public function getFlashes() : array; /** * Clear all flash values. * * Affects the next and subsequent requests. */ public function clearFlash() : void; /** * Prolongs any current flash messages for one more hop. */ public function prolongFlash() : void; } A default implementation is provided in the class Mezzio\\Flash\\FlashMessages , but you may implement the interface yourself if you have special needs that fall outside this standard implementation. The instance will generally be injected into your request under the attribute Mezzio\\Flash\\FlashMessageMiddleware::FLASH_ATTRIBUTE , which evaluates to flash . Usage First, pull the flash messages from the request: $flashMessages = $request-&gt;getAttribute(FlashMessageMiddleware::FLASH_ATTRIBUTE); // or $flashMessages = $request-&gt;getAttribute('flash'); To create a flash message for the next request: $flashMessages-&gt;flash($messageName, $messageValue); To retrieve a message you previously flashed: $message = $flashMessages-&gt;getFlash($messageName); To retrieve all messages you previously flashed: $messages = $flashMessages-&gt;getFlashes(); Hops Sometimes you may want a flash message to persist for longer than a single request. As an example, with a multi-page form, you may want to store messages until all pages have been filled. mezzio-flash allows you to specify hops , indicating how many requests the flash message will persist for. The default value is 1 , indicating a single hop. This value is provided when you call flash() as an optional third argument. The $hops value passed to flash() must be greater than zero. Passing a value less than one will result in flash() throwing an exception of type Mezzio\\Flash\\Exception\\InvalidHopsValueException . To have a message persist for three \"hops\", you might call flash() as follows: $flashMessages-&gt;flash($messageName, $messageValue, 3); Sometimes you may want to ensure all messages persist for one more hop. To do that: $flashMessages-&gt;prolongFlash(); If you want to clear all flash methods, no matter the number of hops: $flashMessages-&gt;clearFlash(); Note, however, that this clears them for the next request , not the current one. Accessing messages in the current request When you create a flash message, it is available in the next request , but not the current request . If you want access to it in the current request as well, use the flashNow() method instead of flash() : $flashMessages-&gt;flashNow($messageName, $messageValue); The signature of this method is the same as for flash() , and allows you to optionally provide a $hops value as well. Unlike flash() , flashNow() will accept a value of zero for $hops , which is useful if you want your message to be visible exclusively in the current request. $flashMessages-&gt;flashNow($messageName, 'One night (request) only!', 0);","title":"Flash Messages"},{"location":"messages/#flash-messages","text":"Flash messages are contained within a Mezzio\\Flash\\FlashMessagesInterface implementation. That interface is defined as follows: namespace Mezzio\\Flash; use Mezzio\\Session\\SessionInterface; interface FlashMessagesInterface { /** * Flash values scheduled for next request. */ public const FLASH_NEXT = self::class . '::FLASH_NEXT'; /** * Create an instance from a session container. * * Flash messages will be retrieved from and persisted to the session via * the `$sessionKey`. */ public static function createFromSession( SessionInterface $session, string $sessionKey = self::FLASH_NEXT ) : FlashMessagesInterface; /** * Set a flash value with the given key. * * Flash values are accessible on the next \"hop\", where a hop is the * next time the session is accessed; you may pass an additional $hops * integer to allow access for more than one hop. * * @param mixed $value */ public function flash(string $key, $value, int $hops = 1) : void; /** * Set a flash value with the given key, but allow access during this request. * * Flash values are generally accessible only on subsequent requests; * using this method, you may make the value available during the current * request as well. * * @param mixed $value */ public function flashNow(string $key, $value, int $hops = 1) : void; /** * Retrieve a flash value. * * Will return a value only if a flash value was set in a previous request, * or if `flashNow()` was called in this request with the same `$key`. * * WILL NOT return a value if set in the current request via `flash()`. * * @param mixed $default Default value to return if no flash value exists. * @return mixed */ public function getFlash(string $key, $default = null); /** * Retrieve all flash values. * * Will return all values was set in a previous request, or if `flashNow()` * was called in this request. * * WILL NOT return values set in the current request via `flash()`. * * @return array */ public function getFlashes() : array; /** * Clear all flash values. * * Affects the next and subsequent requests. */ public function clearFlash() : void; /** * Prolongs any current flash messages for one more hop. */ public function prolongFlash() : void; } A default implementation is provided in the class Mezzio\\Flash\\FlashMessages , but you may implement the interface yourself if you have special needs that fall outside this standard implementation. The instance will generally be injected into your request under the attribute Mezzio\\Flash\\FlashMessageMiddleware::FLASH_ATTRIBUTE , which evaluates to flash .","title":"Flash Messages"},{"location":"messages/#usage","text":"First, pull the flash messages from the request: $flashMessages = $request-&gt;getAttribute(FlashMessageMiddleware::FLASH_ATTRIBUTE); // or $flashMessages = $request-&gt;getAttribute('flash'); To create a flash message for the next request: $flashMessages-&gt;flash($messageName, $messageValue); To retrieve a message you previously flashed: $message = $flashMessages-&gt;getFlash($messageName); To retrieve all messages you previously flashed: $messages = $flashMessages-&gt;getFlashes();","title":"Usage"},{"location":"messages/#hops","text":"Sometimes you may want a flash message to persist for longer than a single request. As an example, with a multi-page form, you may want to store messages until all pages have been filled. mezzio-flash allows you to specify hops , indicating how many requests the flash message will persist for. The default value is 1 , indicating a single hop. This value is provided when you call flash() as an optional third argument. The $hops value passed to flash() must be greater than zero. Passing a value less than one will result in flash() throwing an exception of type Mezzio\\Flash\\Exception\\InvalidHopsValueException . To have a message persist for three \"hops\", you might call flash() as follows: $flashMessages-&gt;flash($messageName, $messageValue, 3); Sometimes you may want to ensure all messages persist for one more hop. To do that: $flashMessages-&gt;prolongFlash(); If you want to clear all flash methods, no matter the number of hops: $flashMessages-&gt;clearFlash(); Note, however, that this clears them for the next request , not the current one.","title":"Hops"},{"location":"messages/#accessing-messages-in-the-current-request","text":"When you create a flash message, it is available in the next request , but not the current request . If you want access to it in the current request as well, use the flashNow() method instead of flash() : $flashMessages-&gt;flashNow($messageName, $messageValue); The signature of this method is the same as for flash() , and allows you to optionally provide a $hops value as well. Unlike flash() , flashNow() will accept a value of zero for $hops , which is useful if you want your message to be visible exclusively in the current request. $flashMessages-&gt;flashNow($messageName, 'One night (request) only!', 0);","title":"Accessing messages in the current request"},{"location":"middleware/","text":"Flash Message Middleware In order to provide flash messages to your middleware, you will first need to register Mezzio\\Flash\\FlashMessageMiddleware in your application pipeline or routed middleware pipeline; additionally, you'll need to ensure Mezzio\\Session\\SessionMiddleware is registered prior to it. This middleware does the following: Pulls the session container from the request via the attribute Mezzio\\Session\\SessionMiddleware::SESSION_ATTRIBUTE (\"session\"). Passes the container, along with a defined session key, to a factory for generating a FlashMessagesInterface instance. Passes that instance to a request that the delegate processes, using another request attribute. Default configuration By default, FlashMessageMiddleware uses FlashMessages::createFromSession() to generate the flash messages container, the key Mezzio\\Flash\\FlashMessagesInterface::FLASH_NEXT (this is a literal string) to pull stored flash messages from the session, and the request attribute FlashMessageMiddleware::FLASH_ATTRIBUTE (\"flash\") to pass the flash messages container to the next middleware. If you are using the laminas-component-installer Composer plugin, the middleware will already be wired for you. Otherwise, you will need to map the middleware to your dependency injection container as an invokable (no constructor arguments). If these defaults will work for you, you have no further configuration to do. Custom configuration If you want to specify a different flash messages container implementation, a different session key, or a different flash messages request attribute name, you will need to create a new factory for your FlashMessagesMiddleware . As an example, in the following, I specify: Application\\FlashMessages as the flash messages container; this class will need to implement FlashMessagesInterface , including the static method createFromSession() . The string Application\\FlashMessages::FLASH_NEXT as the session key in which flash messages will be stored. The request attribute flash-messages in which to store the flash messages container. use Application\\FlashMessages; use Psr\\Container\\ContainerInterface; use Mezzio\\Flash\\FlashMessageMiddleware; class FlashMessageMiddlewareFactory { public function __invoke(ContainerInterface $container) { return new FlashMessageMiddleware( FlashMessages::class, FlashMessages::class . '::FLASH_NEXT', 'flash-messages' ); } } Once you have created this factory, map the FlashMessageMiddleware to it in your dependency injection configuration: 'dependencies' =&gt; [ 'factories' =&gt; [ \\Mezzio\\Flash\\FlashMessageMiddleware::class =&gt; FlashMessageMiddlewareFactory::class, ], ], Piping the middleware You may pipe this middleware either in your application pipeline ( config/pipeline.php ) or a routed middleware pipeline ( config/routes.php , or a delegator factory). When you do, you MUST register it AFTER the Mezzio\\Session\\SessionMiddleware as it depends on that middleware for its session container. As an example within an application pipeline: $app-&gt;pipe(\\Mezzio\\Session\\SessionMiddleware::class); $app-&gt;pipe(\\Mezzio\\Flash\\FlashMessageMiddleware::class); Within a routed middleware definition: $app-&gt;post('/user/login', [ \\Mezzio\\Session\\SessionMiddleware::class, \\Mezzio\\Flash\\FlashMessageMiddleware::class, LoginHandler::class, ]);","title":"Flash Message Middleware"},{"location":"middleware/#flash-message-middleware","text":"In order to provide flash messages to your middleware, you will first need to register Mezzio\\Flash\\FlashMessageMiddleware in your application pipeline or routed middleware pipeline; additionally, you'll need to ensure Mezzio\\Session\\SessionMiddleware is registered prior to it. This middleware does the following: Pulls the session container from the request via the attribute Mezzio\\Session\\SessionMiddleware::SESSION_ATTRIBUTE (\"session\"). Passes the container, along with a defined session key, to a factory for generating a FlashMessagesInterface instance. Passes that instance to a request that the delegate processes, using another request attribute.","title":"Flash Message Middleware"},{"location":"middleware/#default-configuration","text":"By default, FlashMessageMiddleware uses FlashMessages::createFromSession() to generate the flash messages container, the key Mezzio\\Flash\\FlashMessagesInterface::FLASH_NEXT (this is a literal string) to pull stored flash messages from the session, and the request attribute FlashMessageMiddleware::FLASH_ATTRIBUTE (\"flash\") to pass the flash messages container to the next middleware. If you are using the laminas-component-installer Composer plugin, the middleware will already be wired for you. Otherwise, you will need to map the middleware to your dependency injection container as an invokable (no constructor arguments). If these defaults will work for you, you have no further configuration to do.","title":"Default configuration"},{"location":"middleware/#custom-configuration","text":"If you want to specify a different flash messages container implementation, a different session key, or a different flash messages request attribute name, you will need to create a new factory for your FlashMessagesMiddleware . As an example, in the following, I specify: Application\\FlashMessages as the flash messages container; this class will need to implement FlashMessagesInterface , including the static method createFromSession() . The string Application\\FlashMessages::FLASH_NEXT as the session key in which flash messages will be stored. The request attribute flash-messages in which to store the flash messages container. use Application\\FlashMessages; use Psr\\Container\\ContainerInterface; use Mezzio\\Flash\\FlashMessageMiddleware; class FlashMessageMiddlewareFactory { public function __invoke(ContainerInterface $container) { return new FlashMessageMiddleware( FlashMessages::class, FlashMessages::class . '::FLASH_NEXT', 'flash-messages' ); } } Once you have created this factory, map the FlashMessageMiddleware to it in your dependency injection configuration: 'dependencies' =&gt; [ 'factories' =&gt; [ \\Mezzio\\Flash\\FlashMessageMiddleware::class =&gt; FlashMessageMiddlewareFactory::class, ], ],","title":"Custom configuration"},{"location":"middleware/#piping-the-middleware","text":"You may pipe this middleware either in your application pipeline ( config/pipeline.php ) or a routed middleware pipeline ( config/routes.php , or a delegator factory). When you do, you MUST register it AFTER the Mezzio\\Session\\SessionMiddleware as it depends on that middleware for its session container. As an example within an application pipeline: $app-&gt;pipe(\\Mezzio\\Session\\SessionMiddleware::class); $app-&gt;pipe(\\Mezzio\\Flash\\FlashMessageMiddleware::class); Within a routed middleware definition: $app-&gt;post('/user/login', [ \\Mezzio\\Session\\SessionMiddleware::class, \\Mezzio\\Flash\\FlashMessageMiddleware::class, LoginHandler::class, ]);","title":"Piping the middleware"}]}